import {Component, OnInit} from '@angular/core';
import {ReportService} from './report.service';
import {HttpClient} from '../OAuth2/httpClient';
import {Report} from './Report';
import {Column} from './Column';
import {ViewReportService} from './view-report/viewReportService';
import {Router, NavigationExtras} from '@angular/router';
import {NumericLiteral} from 'typescript';
import {DashboardService} from '../dashboard/dashboard.service';
import {OauthService} from '../OAuth2/oauth.service';
import * as _ from 'underscore';

@Component({
  selector: 'app-report',
  templateUrl: './report.component.html',
  styleUrls: ['./report.component.css'],
  providers: [ReportService, DashboardService, HttpClient, ViewReportService, OauthService]
})
export class ReportComponent implements OnInit {
  tables = {};
  arraysColumns = [];
  listOfColumns: Array<string> = [];
  listOfColumnsCopy: Array<string> = [];
  newReport = new Report();
  selectedColumns = [];
  allColumns: Array<string> = [];
  selectedColumn: Array<string> = [];
  availableColumns: Array<string> = [];
  columns=[];
  tableColumn = {};
  obj: {[k: string]: any} = {};
  view: boolean = true;
  isCreatingReport: boolean;
  hideContent: boolean= true;
  
  constructor(private reportService: ReportService, private viewReportService: ViewReportService,
    private router: Router, private dashboardService: DashboardService) {}

  ngOnInit(): void {
      this.newReport.orderBy.push("");
    this.reportService.getColumns().subscribe(response => {
      this.tables = response;
      this.arraysColumns = _.union(_.values(this.tables));
      for (let val of this.arraysColumns) {
        this.listOfColumns = _.union(this.listOfColumns, val)
      }
      this.listOfColumnsCopy = JSON.parse(JSON.stringify(this.listOfColumns));
      this.allColumns = JSON.parse(JSON.stringify(this.listOfColumns));
    });
  }

  createReport() {
    this.isCreatingReport = true;
    this.newReport.owner = '';
    this.newReport.sharedTo = 'Vaibhav';
    this.newReport.actions = '';
    this.newReport.createdDate = '2 April 2018';
    this.newReport.lastExcecution = '2 April 2018';
    var map = new Map<string, any[]>();
    for (let column of this.selectedColumns) {
      for (let key in this.tables) {
        if (_.indexOf(this.tables[key], column) != -1) {

          if (!(map.has(key))) {
            var list = [];
            let newColumn = new Column();
            list.push(column);
            map.set(key, list);
          } else {
            if (!_.contains(map.get(key), column)) {
              map.get(key).push(column);
            }
          }
        }
      }
    }
    this.newReport.tableColumn = map;
    console.log("ReportView " + JSON.stringify(this.newReport));
    this.viewReportService.generateReport(this.newReport, this.isCreatingReport).subscribe(response => {
      if (response.status = 200) {
        let navigationExtras: NavigationExtras = {
          queryParams: {
            "viewResponse": response._body
          }
        };
        this.router.navigate(['viewReport'], navigationExtras);
      }
    });
  }

  addToExcludedALL() {
    this.selectedColumns = JSON.parse(JSON.stringify(this.allColumns));
    for(let i in  this.selectedColumns){
        this.selectedColumns[i].disable=false;
    }
    this.columns= JSON.parse(JSON.stringify(this.selectedColumns));
    this.listOfColumns = [];
  }
  addToExcludedRepeat() {
    if (this.availableColumns.length != 0) {
      for (let value of this.availableColumns) {
        if (this.selectedColumns.indexOf(value) == -1) {

          this.selectedColumns.push(value);
          for (let key in this.listOfColumns) {
            if (value == this.listOfColumns[key]) {
              this.listOfColumns.splice(parseInt(key), 1);
            }
          }
        }
      }
      for(let i in  this.selectedColumns){
          
          this.selectedColumns[i].disable=false;
      }
      this.columns= JSON.parse(JSON.stringify(this.selectedColumns));
    }
  }
  removeFromExcludedRepeat() {
    if (this.selectedColumn.length != 0) {
      for (let value of this.selectedColumn) {
        if (this.listOfColumns.indexOf(value) == -1) {
          this.listOfColumns.push(value);
          for (let key in this.selectedColumns) {
            if (value == this.selectedColumns[key]) {
              this.selectedColumns.splice(parseInt(key), 1);
            }
          }
        }
      }
    }
    this.columns= JSON.parse(JSON.stringify(this.selectedColumns));
  }
  removeFromExcludedALL() {
    this.listOfColumns = JSON.parse(JSON.stringify(this.allColumns));
    this.selectedColumns = [];
    this.columns= JSON.parse(JSON.stringify(this.selectedColumns));
  }
  
  nextScreen() {
    this.hideContent = !this.hideContent;
  }
  previosScreen(){
      this.hideContent = !this.hideContent;
  }
  addGroupBy( i ) {
      let index = _.findLastIndex( this.columns, {
          columnName: this.newReport.groupBy[i].columnName
      } );
      if ( index != -1 ) {
          this.columns[index].disable = true;
      }
      if ( this.newReport.groupBy[i].columnName != "" ) {
          this.newReport.groupBy.push( { operation: '', columnName: '' } );
      }

  }
  addOrderBy( i ) {
      let index = _.findLastIndex( this.selectedColumns, {
          columnName: this.newReport.orderBy[i]
      } );
      if ( index != -1 ) {
          this.selectedColumns[index].disable = true;
      }
      if ( this.newReport.orderBy[i] != "" ) {
          this.newReport.orderBy.push( "" );
      }
  }
  removeOrderBy( i ) {
      let index = _.findLastIndex( this.selectedColumns, {
          columnName: this.newReport.orderBy[i]
      } );
      if ( index != -1 ) {
          this.selectedColumns[index].disable = false;
      }
      this.newReport.orderBy.splice( i, 1 );
      if ( this.newReport.orderBy.length == 0 ) {
          this.newReport.orderBy.push( "" );
      }
  }
  removeGroupBy( i ) {
      let index = _.findLastIndex( this.columns, {
          columnName: this.newReport.groupBy[i].columnName
      } );
      if ( index != -1 ) {
          this.columns[index].disable = false;
      }
      this.newReport.groupBy.splice( i, 1 );
      if ( this.newReport.groupBy.length == 0 ) {
          this.newReport.groupBy.push( { operation: '', columnName: '' } );
      }
  }
}
